--3. Create table given below: Salesperson and Customer
use Rauf

CREATE TABLE SALESPERSON (
    SNo INT PRIMARY KEY,
    SNAME VARCHAR(100),
    CITY VARCHAR(100),
    COMM DECIMAL(3, 2)
);

SELECT * FROM SALESPERSON

drop table SALESPERSON

CREATE TABLE CUSTOMER2 (
    CNM INT PRIMARY KEY,
    CNAME VARCHAR(100),
    CITY VARCHAR(100),
    RATING INT,
    SNo INT,
    FOREIGN KEY (SNo) REFERENCES SALESPERSON(SNo)
);

INSERT INTO SALESPERSON (SNo, SNAME, CITY, COMM) VALUES
(1001, 'Peel', 'London', 0.12),
(1002, 'Serres', 'San Jose', 0.13),
(1004, 'Motika', 'London', 0.11),
(1007, 'Rafkin', 'Barcelona', 0.15),
(1003, 'Axelrod', 'New York', 0.10);

INSERT INTO CUSTOMER2(CNM, CNAME, CITY, RATING, SNo) VALUES
(201, 'Hoffman', 'London', 100, 1001),
(202, 'Giovanne', 'Roe', 200, 1003),
(203, 'Liu', 'San Jose', 300, 1002),
(204, 'Grass', 'Barcelona', 100, 1002),
(206, 'Clemens', 'London', 300, 1007),
(207, 'Pereira', 'Roe', 100, 1004);

SELECT 
    CNM, CNAME, CITY, RATING, SNo
FROM 
    CUSTOMER2
WHERE 
    RATING > 1000;


SELECT SNAME, CITY
FROM 
    SALESPERSON
WHERE 
    CITY = 'Barcelona' OR 'London' AND COMM > 0.12;


	SELECT 
    SNo, SNAME, CITY, COMM
FROM 
    SALESPERSON
WHERE 
    COMM > 0.10 AND COMM < 0.12;

SELECT 
    CNM, CNAME, CITY, RATING, SNo
FROM 
    CUSTOMER
WHERE 
    RATING > 100 OR CITY = 'Roe';



--4  From the following table, write a SQL query to find orders that are
--delivered by a salesperson with ID. 5001. Return ord_no, ord_date, purch_amt.



CREATE TABLE orders (
    ord_no INT PRIMARY KEY,
    purch_amt DECIMAL(10, 2),
    ord_date DATE,
    customer_id INT,
    salesman_id INT
);

INSERT INTO orders (ord_no, purch_amt, ord_date, customer_id, salesman_id) VALUES
(70001, 150.50, '2012-10-05', 3005, 5002),
(70009, 270.65, '2012-09-10', 3001, 5005),
(70002, 65.26, '2012-10-05', 3002, 5001),
(70004, 110.50, '2012-08-17', 3009, 5003),
(70007, 948.50, '2012-09-10', 3005, 5002),
(70005, 2400.60, '2012-07-27', 3007, 5001),
(70008, 5760.00, '2012-09-10', 3002, 5001),
(70010, 1983.43, '2012-10-10', 3004, 5006),
(70003, 2480.40, '2012-10-10', 3009, 5003),
(70012, 250.45, '2012-06-27', 3008, 5002),
(70011, 75.29, '2012-08-17', 3003, 5007),
(70013, 3045.60, '2012-04-25', 3002, 5001);

SELECT 
    ord_no, 
    ord_date, 
    purch_amt
FROM 
    orders
WHERE 
    salesman_id = 5001;



--5.From the following table, write a SQL query to select a range of products whose price is in the range Rs.200 to Rs.600.
--Begin and end values are included. Return pro_id, pro_name, pro_price, and pro_com.


create table item_mast(pro_id int primary key,pro_name varchar(20),pro_price int,pro_com int)


INSERT INTO item_mast (pro_id, pro_name, pro_price, pro_com)
VALUES
(101, 'Mother Board', 3200.00, 15),
(102, 'Key Board', 450.00, 16),
(103, 'ZIP drive', 250.00, 14),
(104, 'Speaker', 550.00, 16),
(105, 'Monitor', 5000.00, 11),
(106, 'DVD drive', 900.00, 12),
(107, 'CD drive', 800.00, 12),
(108, 'Printer', 2600.00, 13),
(109, 'Refill cartridge', 350.00, 13),
(110, 'Mouse', 250.00, 12);

SELECT pro_id, pro_name, pro_price, pro_com
FROM item_mast
WHERE pro_price BETWEEN 200 AND 600;

SELECT AVG(pro_price) AS avg
FROM item_mast
WHERE pro_com = 16;

SELECT pro_name AS 'Item Name', pro_price AS 'Price in Rs.'
FROM item_mast;

SELECT pro_name, pro_price
FROM item_mast
WHERE pro_price >= 250
ORDER BY pro_price DESC, pro_name ASC;

SELECT AVG(pro_price) AS 'Average Price', pro_com AS 'Company Code'
FROM item_mast
GROUP BY pro_com;